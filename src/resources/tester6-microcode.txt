INSTR:300
AMR R0,X1,100	#Add Memory To Register, r = 0..3 
SMR R0,X1,101	#Subtract Memory From Register, r = 0..3 
SMR R1,X1,101i	#
AIR R3,200		#Add Immediate to Register, r = 0..3 
SIR R2,1		#Subtract  Immediate  from Register, r = 0..3 	
LDX X3,101    	#Load Index Register from Memory, x = 1..3 
LDR R0,X1,101 	# Load Register From Memory, r = 0..3   //testing
LDR R0,X1,101i 	#//testing
LDA R1,X0,100 	#Load Register with Address, r = 0..3 
STR R0,X0,101   #  Store Register To Memory, r = 0..3 
STX X3,223i     # Store Index Register to Memory. X = 1..3 
STX X3,224		#
LDR R2,X0,101 	#//testing
JMP x0,150		# Unconditional Jump To Address
INSTR:150
MLT R2,R3		#Multiply Register by Register
DVD R3,R2		#Divide Register by Register
TRR R0,R1		#Test the Equality of Register and Register 
AND R1,R2		#Logical And of Register and Register 
ORR R2,R1		#Logical Or of Register and Register 
LDR R1,X0,101 	#//testing 
NOT R1			
LDR R1,X0,101 	#//testing
SRC r1,8,a,l	#Shift Register by Count:SRC r, count, A/L, L/R
LDR R1,X0,101 	#//testing 
RRC r0,4,l,r	# Rotate Register by Count:RRC r, count, A/L, L/R
HLT 0
LDR R3,X0,103 	#//load up new line
IN R1,0       	#//Perform IN
OUT R1,1  		#//Perform OUT
OUT R3,1  		#//Perform OUT new line must be used to terminate OUT
TRAP 3
JZ r0,X1,96   	#Jump If Zero: 
JNE r0,X0,97	# Jump If Not Equal: 
JNE r0,X0,97i
JCC 3,X0,234	# Jump If Condition Code 
JMP x3,230		#Unconditional Jump To Address 
JSR x2,219i		#Jump and Save Return Address:
JSR x0,197i       #Check the word if contains the content 
RFS 177			#Return From Subroutine w/ return code as Immed; implemented ?
SOB R1,X1,101i	#Subtract One And Branch. R = 0..3
JGE R1,X1,101	#Jump Greater Than or Equal To
EOP 
DATA:100
DATA 105,100    #
DATA 55,101     #
DATA 32,102     #//
DATA 10,103     #// new line
DATA 666,104    #// new line

