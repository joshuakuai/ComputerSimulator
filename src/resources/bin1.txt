INSTR:51
00110100000011111001     #jump to main function
00000101000000110001     #zero out R1
00001001000000101000     #empty space in address 40 for temp stortage(of pointers,values)
00001001000000101001     #empty space in address 41 for temp stortage(of pointers,values)
00001001000000101010     #empty space in address 42 for temp stortage(of pointers,values)
00001000000000101000     #store digits array pointer into address 40
00001000000000101001     #store digits array pointer into address 41(to pass to create integer subroutine)
00000101000000101000     #load the pointer into R1
11110100000000000000     #Insert integer from keyboard into R0
00011100000000001010     #check if the character is (enter) by subtracting 10 from it, R0-10=0 then char=carriage return
00000110000000110001     #zero out R2
00001000000000101010     #save current R0 value in address 42
00000110000000101010     #pass the value from address 42 to R2
00000100000000101001     #pass pointer to start of digit array to R0 (to save as arugment pointer for subroutinue call)
00000000000000000000     #check if digit array is empty and user pressed enter by subtracting current pointer from intial pointer if =0 then digit array empty
00000000000000000000     #if digits array is empty tell user to re-enter a valid number
00000000000000000000     #and restart user input loop
00101010000001011110     #else exit the loop and go to subroutine to collect the digits into a final integer
00000101000000101000     #load back digit array pointer to R1
00000100000000101010     #load the value of R0 back from address 42
00011000000000001101     #and return the character to original ascii number by adding 13
00011100000000110000     #subtract 48 to convert ascii to digit, eg 48-48=0 so user input character is zero
00101000000001100000     #the character is integer "0" go to save number into memory subroutine
00011100000000000001     #if it is not zero than subtract 1 same as 49-49=0 therefore the digit is 1
00101000000001100000     #the character is integer "1" go to save number into memory subroutine
00011100000000000001     #subtract one from R0
00101000000001100000     #the character is integer "2" go to save number into memory subroutine
00011100000000000001     #subtract one from R0
00101000000001100000     #the character is integer "3" go to save number into memory subroutine
00011100000000000001     #subtract one from R0
00101000000001100000     #the character is integer "4" go to save number into memory subroutine
00011100000000000001     #subtract one from R0
00101000000001100000     #the character is integer "5" go to save number into memory subroutine
00011100000000000001     #subtract one from R0
00101000000001100000     #the character is integer "6" go to save number into memory subroutine
00011100000000000001     #subtract one from R0
00101000000001100000     #the character is integer "7" go to save number into memory subroutine
00011100000000000001     #subtract one from R0
00101000000001100000     #the character is integer "8" go to save number into memory subroutine
00011100000000000001     #subtract one from R0
00101000000001100000     #the character is integer "9" go to save number into memory subroutine
00101100000011100011     #inform the user what they entered is not a digit and they should enter a valid digit character
00110100000000111011     #continue loop
00111000000011000111     #go to create integer subroutine
00111100000000000000     #return to calling routine, R0 contains integer after returning from create integer subroutine
00001000001000101000     #Store input digit into memory cell pointed to by address 40
00011001000000000001     #Increment the array position pointer
00001001000000101000     #Store the new array position in memory address 40
00000100000000110001     #empty R0 (address 49 contains zero)
00011000000011111110     #put 254 in R0
01100100000000000000     #turn R0 into -255
00000100001000101000     #put -255 in the next digit space in the array to indicate end of array
00110100000000111011     #go back to user input loop
00000101000000110001     #zero out R1
00001001000000101000     #empty space in address 40 for temp stortage(of pointers,values)
00001001000000101001     #empty space in address 41 for temp stortage(of pointers,values)
00001001000000101010     #empty space in address 42 for temp stortage(of pointers,values)
00001000000000101000     #store pointer to integer in address 40
00011000000000000001     #add one to R0 to get digits array pointer(which was stored in the next address space after integer pointer)
00001000000000101001     #store digits array pointer into address 41
00001011000000101010     #store Return address in address 42
00000111000000101001     #load pointer to digits array into R3
00000100000000110001     #zero out R0
00011000000000001010     #put 10 in R0
00001000001000101001     #put new line character in start of digit array to know we reached the end of printing in reverse
00000100001000101000     #load integer into R0
00011011000000000001     #increment pointer
00001011000000101001     #put new pointer in address 41
00000110000000110001     #zero out R2
00011010000000001010     #put 10 in R2
01010100100000000000     #divide by 10 to get first digit as reminder e.g. 713/10, R0=71 R1=3
00001001001000101001     #store reminder ie digit into digit array
00101100000001110101     #if r0 is not zero that means the integer still has more digits to convert
00000101001000101001     #Load the left most digit eg 713 leftmost digit is 7....etc
11111001000000000001     #Print Digit
00011101000000001010     #check for newline character if R1-10=0 exit loop and Return
00011111000000000001     #decrement the pointer to print next leftmost digit
00001011000000101001     #store new pointer in address 41
00101101000001111100	 #else if not new line continue print loop
00000111000000101010     #Load return address into R3 from address 42
00111100000000000000     #Return to calling function
00000101000000110001     #zero out R1
00001001000000101000     #empty space in address 40 for temp stortage(of pointers,values)
00001001000000101001     #empty space in address 41 for temp stortage(of pointers,values)
00001001000000101010     #empty space in address 42 for temp stortage(of pointers,values)
00001001000000101011     #empty space in address 43 for temp stortage(of pointers,values)
00001001000000101100     #empty space in address 44 for temp stortage(of pointers,values)
00001000000000101000     #store user selected number address into address 40
00011000000000000001     #add one to R0 to get integer array pointer
00001000000000101001     #store pointer to integer in address 41
00011000000000000001     #add one to R0 to get distance array pointer
00001000000000101010     #store distance array pointer into address 42
00011000000000000001     #add one to R0 to get loop counter pointer
00001000000000101011     #store loop counter address into address 43
00001011000000101100     #store Return address in address 43
00000111001000101011     #load loop counter into R3
00000100000000101001     #load integer array pointer into R0
00000101000000101010     #load distance array pointer into R1
00000110001000101000     #Load user number to compare into R2
00010110001000101001     #Subtract user number from the integer in the integer array to get the distance between them
01000110000010011010     #if distance is positive continue loop
01100110000000000000     #else convert to positive using NOT instruction to turn negative into positive
00011010000000000001     #add 1 because using NOT to convert to positive there is one number missing(eg -7!=6 so 6+1=7)
00001010001000101010     #store positive distance value into distance array
00011000000000000001     #increment current distance array pointer by one
00011001000000000001     #increment current integer array pointer by one
00001000000000101001     #Store new distance array pointer into memory address 41
00001001000000101010     #Store new integer array pointer into memory address 42
01000011000010010101     #continue loop
00000111000000101100     #load return address from address 44 back into R3
00111100000000000000     #return back to calling routine
00000101000000110001     #zero out R1
00001001000000101000     #empty space in address 40 for temp stortage(of pointers,values)
00001001000000101001     #empty space in address 41 for temp stortage(of pointers,values)
00001001000000101010     #empty space in address 42 for temp stortage(of pointers,values)
00001001000000101011     #empty space in address 43 for temp stortage(of pointers,values)
00001001000000101100     #empty space in address 44 for temp stortage(of pointers,values)
00001000000000101000     #store pointer to distance array into address 40
00011000000000000001     #add one to R0 to get loop counter address
00001000000000101001     #store loop counter address into address 41
00000111001000101001     #Load loop counter into R3
00001011000000101001     #store loop counter value in address 41
00001011000000101010     #store return address(R3) into address 42
00000101000000101000     #load distance array pointer into R1 from address 40
00000110001000101000     #load first element from distance array
00000100000000110001     #zero out R0
00011001000000000001     #increment distance array pointer by one
00001001000000101000     #Store next element pointer into memory address 40
00011111000000000001     #the first two elements are preloaded so one less loop counter is needed
00010110001000101000     #subtract previous element from next element
01000110000010110111     #if R1>=0 go to FirstCondition
00110100000011000010     #else the first element is smaller
00000110001000101000     #load second distance integer into R2 (as smallest distance) for next round of comparison
00001011000000101011     #backup current loop counter(R3) into address 43
00010111000000101001     #subtract current loop counter R3 from original loop counter address 41
01100111000000000000     #result is negative so we convert it back to positve by NOT
00011011000000000001     #add the missing one after using NOT instruction
00001011000000101100     #save the value in address 44
00000100000000101100     #load the value in address 44 into R0 to get the closest integer position
00000111000000101011     #return current loop counter(address 43) back into R3
00011001000000000001     #increment distance array pointer by one
00001001000000101000     #Store next element pointer into memory address 40
00110100000011000100     #go to next loop increment
00011001000000000001     #increment distance array pointer by one
00001001000000101000     #Store next element pointer into memory address 161
01000011000010110100     #continue loop
00000111000000101010     #put return address back into R3 from address 159
00111100000000000000     #return to calling function and R0 has the element position in integer array of closest integer to user selected number
00000101000000110001     #zero out R1
00001001000000101000     #empty space in address 40 for temp stortage(of pointers,values)
00001001000000101001     #empty space in address 41 for temp stortage(of pointers,values)
00001000000000101000     #store digits array pointer into address 40
00000101000000101000     #load the pointer into R1
00000100001000101000     #load digit from array into R0
00001000000000101001     #store the digit into memory address 41
00011001000000000001     #increment digit array pointer
00001001000000101000     #store new pointer in address 40
00000110001000101000     #load next digit in array
00011010000011111111     #check if value is -255 if so -255+255=0 the array has reached its end
00101010000011100010     #there is only one digit so exit and save it as the final integer
00000100000000101001     #if it is not end of array then load saved integer from address 41 into R0
00000110000000110001     #zero out R2
00011010000000001010     #add 10 to R2 to multiply by R0 so we can reconstruct the integer eg 71...(7)*10=70 and then 70+(1)=71
01010000100000000000     #R0*10
00001001000000101001     #store the new value in 41
00000110001000101000     #load following digit in the array
00010010000000101001     #add the two digits together eg R2=1 and MEM=70 so R2=1+70=71
00001010000000101001     #store integer back in 41
00000101000000101000     #load digit array pointer back into R1
00011001000000000001     #increment pointer
00001001000000101000     #store new pointer in memory address 40
00000100001000101000     #load next digit into R0
00011000000011111111     #check if value is -255 if so -255+255=0 the array has reached its end
00101100000011010011     #else continue building the integer
00000100000000101001     #load integer in address 41 into R0
00111100000000000000     #Finished building the integer go back to calling routine with integer in R0
00000101000000101110     #load point to error string into R1
00001001000000110010     #store pointer to error string in address 50
00000110000000110001     #zero out R2
00011101000000000001     #the first time around the loop will increase the pointer so we decrement it before it begins
00011001000000000001     #increment string array pointer
00001001000000110010     #store new pointer
00000110001000110010     #load a character from the string array into R2
11111010000000000001     #print out the character to console printer
00010110000000001010     #check to see if character in R2 is new line character(indicating end of the string)
00000000000000000000     #if not newline continue loop
00111100000000000000     #else exit and return to calling routine
00001000000000110010     #store pointer to character array in address 50
00000101000000110010     #load the string array pointer from address 50 into R1
00000110000000110001     #zero out R2
00011101000000000001     #the first time around the loop will increase the pointer so we decrement it before it begins
00011001000000000001     #increment string array pointer
00001001000000110010     #store new pointer
00000110001000110010     #load a character from the string array into R2
11111010000000000001     #print out the character to console printer
00010110000000001010     #check to see if character in R2 is new line character(indicating end of the string)
00101110000011110010     #if not newline continue loop
00111100000000000000     #else exit and return to calling routine
00001000000000110001     #put zero in address 49 (use this later to empty out registers)
00001000000000011110     #initialize loop counter in address 30 to zero
00011000000011111111     #add 255 to R0
00011000000011111111     #add 255 to R0
00011000000000101000     #add 40 to R0
00001000000000011111     #R0=550 put this in address 31 as pointer to integer array
00011000000001100100     #add 100 to R0
00001000000000100000     #R0=650 put this in address 32 as pointer to distance array
00011000000001100100     #add 100 to R0
00001000000000100001     #R0=750 put this in address 33 as pointer to digits array
00011000000000110010     #add 50 to R0
00001000000000100010     #R0=800 put this in address 34 as pointer to Integer Total number Message
00011000000000110010     #add 50 to R0
00001000000000100011     #R0=950	put this in address 35 as pointer to Insert Integers Message
00001000000000101111     #store R0 into address 47
00000100000000110001     #zero out(empty out) R0
00001000000000100100     #empty space in address 36 for user selected number(that will use to find closest number)
00001000000000100101     #empty space in address 37 for temp stortage(of pointers,values)
00001000000000100110     #empty space in address 38 for temp stortage(of pointers,values)
00001000000000100111     #empty space in address 39 for temp stortage(of pointers,values)
00000100000000101111     #load back R0 from address 47
00011000000000110010     #add 50 to R0
00001000000000101101     #R0=950 put this in address 45 as pointer to User Number Message
00011000000000110010     #add 50 to R0
00001000000000101110     #R0=1000 put this in address 46 as pointer to Error Message
00011011000001011011	 #add 91 to R3
00001011000000100111	 #store R3 into address 39
10100100110000100111	 #load 91 into X3
00111000110011111111	 #jump to subroutine for loading error string into memory
00000100000000100001     #load digits array pointer into R0(as arugment to pass to user input subroutine)
00111000000000110100     #jump to user input subroutine
00001000000000011110     #R0 has the pointer to the result integer, store it as the loop counter in address 30
00000101000000011111     #load pointer to integer array into R1
00001001000000100101     #store pointer from R1 into temp space address 37
00000110000000011110     #LDR loop counter in R2
00000100000000100001     #load digits array pointer into R0(as arugment to pass to user input subroutine)	
00000100000001100011	 #zero out R0
00011000000000100010	 #add 34 to R0
00001000000000100110     #store R0 into address 38
10100100010000100110	 #load 34 into X1
00001010000000100110     #store current loop counter in temp space 38
00111000000000110100     #jump to user input subroutine, R0 has the return result
00001000001000100101     #Store integer in R0 into integer array
00000101000000100101     #load current integer array pointer into R1
00011001000000000001     #increment integer array pointer(R1) by one
00001001000000100101     #store new pointer in address 37
00000110000000100110     #restore current loop counter into R2
01000010010011111111     #decrement loop counter and continue loop (InputLoop)
00000100000000011111     #load pointer to integer array into R0
00001000000000100101     #store R0 into address 37
00000100000000100001     #load digits array pointer into R0
00001000000000100110     #store R0 into address 38
00000110000000011110     #LDR loop counter in R2
00000111000001100011     #zero out R3
00011011000000110100	 #add 52 to R3
00001011000000100111	 #store R3 into address 39
10100100100000100111	 #load 52 into X2
00001100000000100101     #load address 37 into R0(to pass as arugment to print subroutine)
00001010000000100111     #store current loop counter in temp space 39
00111000000001101000     #call PrintInteger and pass to it integer array(address 31) and digits array locations(address 33)
00000101000000100101     #load current integer array pointer into R1 from address 37
00011001000000000001     #increment pointer by one
00001001000000100101     #store new pointer(R3) into address 37
00000110000000100111     #restore current loop counter into R2	
01000010100011111111	 #decrement loop counter and continue loop
00000100000000100001     #load digits array pointer into R0(as arugment to pass to user input subroutine)
00111000000000110100     #jump to user input subroutine
00001000000000100011     #R0 has the pointer to the integer, store it as user selected number in address 35
00000100000000011111     #load pointer to integer array into R0
00001000000000100101     #store R0 into address 37
00000100000000100000     #load distance array pointer into R0
00001000000000100110     #store R0 into address 38
00000100000000011110     #load loop counter in R0
00001000000000100111     #Store loop counter into address 39
00001100000000100100     #load address 36 into R0(to pass as start of arugment list to distance subroutine)
00111000000010000100     #go to distance array calculation subroutine
00000100000000100000     #load distance array pointer into R0
00001000000000100101     #store R0 into address 37
00000100000000011110     #load loop counter in R0
00001000000000100110     #Store loop counter into address 38
00001100000000100101     #load address 37 into R0(to pass as start of arugment list to closest number subroutine)
00111000000010100010     #go to closest number subroutine
00010000000000011111     #add integer array position to array address pointer to get memory location of the integer
00001000000000110000     #STR closest number(R0) into address 48
00000100000000100100     #load pointer to user number into R0
00001000000000100101     #store R0 into address 37
00000100000000100001     #load digits array pointer into R0
00001000000000100110     #store R0 into address 38
00001100000000100101     #load address 37 into R0(to pass as arugment list to print subroutine)
00111000000001101000     #call print subroutine to print user number
00000100000000110000     #load pointer to user number into R0
00001000000000100101     #store R0 into address 37
00000100000000100001     #load digits array pointer into R0
00001000000000100110     #store R0 into address 38
00001100000000100101     #load address 37 into R0(to pass as arugment list to print subroutine)
00111000000001101000     #call print subroutine to print user number
00001000000000100101     #store pointer to error string into address 37
00000101000000100101     #load the pointer into R1
00000110000000110001     #zero out R2
00011010000000011110     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001101100     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001100101     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001100001     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001110011     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001100101     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000000100000     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001101001     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001101110     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001110011     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001100101     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001110010     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001110100     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000000100000     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001100001     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000000100000     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001110110     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001100001     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001101100     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001101001     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001100100     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000000100000     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001100011     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001101000     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001100001     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001110010     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001100001     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001100011     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001110100     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001100101     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000001110010     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00000110000000110001     #zero out R2
00011010000000001010     #put a character in R2
00001010001000100101     #store the character in the character array space in memory
00011001000000000001     #increment character array pointer
00001001000000100101     #store new pointer
00111100000000000000     #return to calling function
11011100000000000000     #end of the program