00011000000000101100      #AIR R0,300           Base location
00001000000010101011      #STR R0,X0,171        Store to the 170
00011000000001100000      #AIR R0,96            Increase Index function address
00001000000010111110      #STR R0,X0,190
00011000000000000100      #AIR R0,4             Reset index function address
00001000000010111111      #STR R0,X0,191
00011000000000000101      #AIR R0,5             Print word function address
00001000000011000000      #STR R0,X0,192
00011000000000001000      #AIR R0,8             Get input function address
00001000000011000001      #STR R0,X0,193
00011000000000001010      #AIR R0,10            Compare words function address
00001000000011000010      #STR R0,X0,194
00011000000000001011      #AIR R0,11            Empty cache function address
00001000000011000011      #STR R0,X0,195
00011000000000001110      #AIR R0,14            Set string match message function address
00001000000011000100      #STR R0,X0,196
00011000000001000100      #AIR R0,68            Set check match function address
00001000000011000101      #STR R0,X0,197
00011010000011111111      #AIR R2,255           Set welcome message location 
00001010000011001011      #STR R2,X0,203      
00011010000011111111      #AIR R2,255           Set words list locations
00001010000011001100      #STR R2,X0,204
00011010000000010100      #AIR R2,20            Set substring match words indicator list location
00001010000011001101      #STR R2,X0,205
00011010000000010100      #AIR R2,20            Set words list location
00001010000011001110      #STR R2,X0,206       
00001010001011001100      #STR R2,X0,204i     Store the first location into the list locations
00010110000011001110      #SMR R2,X0,206        Empty the R2
00011010000001010000      #AIR R2,80            Set character ‘P’ WELCOME MESSAGE
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011010000000011100      #AIR R2,28            Set character ‘l’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011110000000000111      #SIR R2,7             Set character ‘e’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011110000000000100      #SIR R2,4             Set character ‘a’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011010000000010010      #AIR R2,18            Set character ‘s’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011110000000001110      #SIR R2,14            Set character ‘e’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011110000001000101      #SIR R2,69            Set character space
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011010000001001001      #AIR R2,73            Set character ‘i’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011010000000000101      #AIR R2,5             Set character ‘n’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011010000000000010      #AIR R2,2             Set character ‘p’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011010000000000101      #AIR R2,5             Set character ‘u’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011110000000000001      #SIR R2,1             Set character ‘t’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011110000001010100      #SIR R2,84            Set character space
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011010000000010001      #AIR R2,17            Set character ‘1’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011110000000000001      #SIR R2,1             Set character ‘0’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011110000000010000      #SIR R2,16            Set character space
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011010000001010111      #AIR R2,87            Set character ‘w’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011110000000001000      #SIR R2,8             Set character ‘o’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011010000000000011      #AIR R2,3             Set character ‘r’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011110000000001110      #SIR R2,14            Set character ‘d’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR R0,190i        Increase index
00011010000000001111      #AIR R2,15            Set character ‘s’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011110000001101001      #SIR R2,105           Set character ‘\n’
00001010011011001011      #STR R2,X1,203i
00111000001010111111      #JSR X0,191i        Reset index
00011110000000001010      #SIR R2,10            Empty the R2
00000111000010101011      #LDR R3,X0,171        Load the program start location 
00011011000011111111      #AIR R3,255           Set main funcion location
00011011000000101011      #AIR R3,43       
00001011000010101100      #STR R3,X0,172      
00110100001010101100      #JMP X0,172i        Jump to main function
00011001000000000001      #AIR R1,1              INCREASE INDEX FUNCTION
00001001000011001000      #STR R1,X0,200      
10100100010011001000      #LDX X1,200
00111100000000000000      #RFS 0
00000101000011001000      #LDR R1,X0,200       REST INDEX FUNCTION
00010101000011001000      #SMR R1,X0,200       Empty the content of R1
00001001000011001000      #STR R1,X0,200       Store the 0 index back to the memory
10100100010011001000      #LDX X1,200       Load the 0 index value into X1
00111100000000000000      #RFS 0
00001011000010101010      #STR R3,X0,170       PRINT THE MESSAGE FUNCTION
00111000001010111111      #JSR R0,191i       Reset index
00000110011011001001      #LDR R2,X1,201i    Load character LOCATION FP1
11111010000000000001      #OUT R2,1             Print the character to the console
00111000001010111110      #JSR X0,190i       Increase index
00011110000000001010      #SIR R2,10           Check if finish
00000111000010101011      #LDR R3,X0,171       If finish,then jump to the end
00011011000001111011      #AIR R3,123       Set the end location
00001011000010101100      #STR R3,X0,172      
00101010001010101100      #JZ R2,X0,172i     Jump to LOCATION FP2
00000111000010101011      #LDR R3,X0,171
00011011000001101111      #AIR R3,111          Set the loop begin location 
00001011000010101100      #STR R3,X0,172    
00110100001010101100      #JMP X0,172i       Jump to LOCATION FP1
00000111000010101010      #LDR R3,X0,170       Resume the return address LOCATION FP2
00111100000000000000      #RFS 0
00001011000010101010      #STR R3,X0,170      GET A WORD FUNCTION
00111000001010111111      #JSR X0,191i      Reset index
00000110101011001100      #LDR R2,X2,204i   Load word list begin location to R2 using X2 offset
00001010000011001001      #STR R2,X0,201      Store the word list begin location into 201
11110100000000000000      #IN R0,0            LOCATION FG1
00001000011011001001      #STR R0,X1,201i   Store the character to the current word location
00011100000000001010      #SIR R0,10          Check if it is ‘\n’
00111000001010111110      #JSR X0,190i      Increase the character index
00000111000010101011      #LDR R3,X0,171
00011011000010001101      #AIR R3,141      Set the loop end location 
00001011000010101100      #STR R3,X0,172    
00101000001010101100      #JZ R0,X0,172i    Jump to LOCATION FG2 if input ‘\n’
00000111000010101011      #LDR R3,X0,171
00011000000010000001      #AIR 3,129      Set the loop begin location 
00001011000010101100      #STR R3,X0,172    
00110100001010101100      #JMP X0,172i      Read next character,jump to LOCATION FG1
00000111000010101010      #LDR R3,X0,170      Resume the return address LOCATION FG2
00111100000000000000      #RFS 0
00001011000010101010      #STR R3,X0,170      COMPARE TWO WORDS FUNCTION
00111000001010111111      #JSR X0,191i      Reset index
00000110011011001001      #LDR R2,X1,201i   Get first word’s character LOCATION FC1
00010110011011001010      #SMR R2,X1,202i   Compare the two character
00000111000010101011      #LDR R3,X0,171
00011011000010100000      #AIR R3,160      Set the next location Handle 
00001011000010101100      #STR R3,X0,172    
00101010001010101100      #JZ R2,X0,172i    Jump to LOCATION FC2
00000111000010101011      #LDR R3,X0,171
00011011000010100101      #AIR R3,165      Set the set first word location 
00001011000010101100      #STR R3,X0,172    
01000110001010101100      #JGE R2,X0,172i   If first one is bigger,jump to Location FC3
00000100000011001010      #LDR R0,X0,202      else load the second word’s location into R0
00000111000010101011      #LDR R3,X0,171
00011011000010100110      #AIR R3,166      Set return location 
00001011000010101100      #STR R3,X0,172    
00110100001010101100      #JMP X0,172i      Jump to LOCATION FC4
00111000001010111110      #JSR X0,190i      Increase the character index LOCATION FC2
00000111000010101011      #LDR R3,X0,171
00011011000010010001      #AIR R3,145      Set next loop location 
00001011000010101100      #STR R3,X0,172    
00110100001010101100      #JMP X0,172i      Got back and check next character Jump to LOCATION FC1
00000100000011001001      #LDR R0,X0,201      Load the first word’s location into R0 LOCATION FC3
00000111000010101010      #LDR R3,X0,170      Resume the return address LOCATION FC4
00111100000000000000      #RFS 0
00000100000001100100      #LDR R0,X0,100      EMPTY CACHE FUNCTION
00000101000001100100      #LDR R1,X0,100
00000110000001100100      #LDR R2,X0,100
00000111000001100100      #LDR R3,X0,100
10100100010001100100      #LDX X1,100
10100100100001100100      #LDX X2,100
10100100110001100100      #LDX X3,100
00000111000011001010      #LDR R3,X0,202         Empty 202 and 201
00000110000011001001      #LDR R2,X0,201        
00010111000011001010      #SMR R3,X0,202  
00010110000011001001      #SMR R2,X0,201          
00001011000011001010      #STR R3,X0,202    
00001010000011001001      #STR R2,X0,201 
00111100000000000000      #RFS 0
00011010000001001001      #AIR R2,73            Set character ‘I’ SET SUBSTRING MESSAGE FUNCTION
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011010000000100101      #AIR R2,37            Set character ‘n’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011010000000000010      #AIR R2,2             Set character ‘p’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011010000000000101      #AIR R2,5             Set character ‘u’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011110000000000001      #SIR R2,1             Set character ‘t’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011110000001010100      #SIR R2,84            Set character space
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011010000001010011      #AIR R2,83            Set character ‘s’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011110000000000001      #SIR R2,1             Set character ‘t’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011110000000000010      #SIR R2,2             Set character ‘r’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011110000000001001      #SIR R2,9             Set character ‘i’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011010000000000101      #AIR R2,5             Set character ‘n’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011110000000000111      #SIR R2,7             Set character ‘g’
00001010001011001011      #STR R2,1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011110000001000111      #SIR R2,71            Set character space
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011010000001010100      #AIR R2,84            Set character ‘t’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011110000000000101      #SIR R2,5             Set character ‘o’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011110000001001111      #SIR R2,79            Set character space
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011010000001001101      #AIR R2,77            Set character ‘m’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011110000000001100      #SIR R2,12            Set character ‘a’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011010000000010011      #AIR R2,19            Set character ‘t’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011110000000010001      #SIR R2,17            Set character ‘c’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011010000000000101      #AIR R2,5             Set character ‘h’
00001010011011001011      #STR R2,X1,203i
00111000001010111110      #JSR X0,190i        Increase index
00011110000001011110      #SIR R2,94            Set character ‘\n’
00001010011011001011      #STR R2,X1,203i
00111000001010111111      #JSR X0,191i        Reset index
00011110000000001010      #SIR R2,10            Empty the R2
00111100000000000000      #RFS 0
00001011000010101010      #STR R3,X0,170        CHECK WORD CONTAINS SUBSTRING FUNCTION
00111000001010111111      #JSR X0,191i        Reset index
00000110011011001101      #LDR R2,X1,205i     LOCATION CC1
00011110000000001010      #SIR R2,10
00000111000010101011      #LDR R3,X0,171
00011011000011111111      #AIR R3,255        Set success location 
00011011000000100110      #AIR R3,38
00001011000010101100      #STR R3,X0,172    
00101010001010101100      #JZ R2,X0,172i      Jump to LOCATION CC4
00000110001011001001      #LDR R2,X0,201i     Get first word’s character
00010110011011001101      #SMR R2,X1,205i     Compare the two character
00000111000010101011      #LDR R3,X0,171
00011011000011111111      #AIR R3,255        Set deal with not equal location
00011011000000010011      #AIR R3,19 
00001011000010101100      #STR R3,X0,172    
00101110001010101100      #JNE R2,X0,172i     Jump to LOCATION CC2
00111000001010111110      #JSR X0,190i        If the same Increase index number and check again
00000110000011001001      #LDR R2,X0,201        Set the first word to next character
00011010000000000001      #AIR R2,1        
00001010000011001001      #STR R2,X0,201
00000111000010101011      #LDR R3,X0,171
00011011000011111100      #AIR R3,252        Set next loop location 
00001011000010101100      #STR R3,X0,172    
00110100001010101100      #JMP X0,172i        Jump to LOCATION CC1
00111000001010111111      #JSR X0,191i        Reset index LOCATION CC2
00000110001011001001      #LDR R2,X0,201i     Check if the first word is reach to the end
00011110000000001010      #SIR R2,10
00000111000010101011      #LDR R3,X0,171
00011011000011111111      #AIR R3,255        Set failed match location
00011011000000100010      #AIR R3,34 
00001011000010101100      #STR R3,X0,172    
00101000001010101100      #JZ R0,X0,172i      Jump to LOCATION CC3
00000110000011001001      #LDR R2,X0,201        Else set the word to next character
00011010000000000001      #AIR R2,1       
00001010000011001001      #STR R2,X0,201
00000111000010101011      #LDR R3,X0,171
00011011000011111100      #AIR R3,252        Set next loop location 
00001011000010101100      #STR R3,X0,172    
00110100001010101100      #JMP X0,172i        Jump to LOCATION CC1
00001000000010110100      #STR R0,X0,180        Set the result as 0 LOCATION CC3
00010100000010110100      #SMR R0,X0,180
00000111000010101010      #LDR R3,X0,170        Resume the return address
00111100000000000000      #RFS 0
00001000000010110100      #STR R0,X0,180        Set the result as 1 LOCATION CC4
00010100000010110100      #SMR R0,X0,180
00011000000000000001      #AIR R0,1
00000111000010101010      #LDR R3,X0,170        Resume the return address
00111100000000000000      #RFS 0
00000110000011001011      #LDR R2,X0,203        Load welcome message location into R2 MAIN FUNCTION
00001010000011001001      #STR R2,X0,201         Store the welcome message location into 201
00010110000011001011      #SMR R2,X0,203        Empty the R2
00111000001011000000      #JSR X0,192i        Print the welcome message
00111000001011000001      #JSR X0,193i        Read a word from user LOCATION M1
00000111000011001010      #LDR R3,X0,202           Load the word index
00011010000000000001      #AIR R2,1             Increase the word index
00001010000011001010      #STR R2,X0,202           Store the new word index
00011110000000001010      #SIR R2,10            Check if finish 10 words
00000111000010101011      #LDR R3,X0,171
00011011000011111111      #AIR R3,255        Set next loop location
00011011000001000011      #AIR R3,67
00001011000010101100      #STR R3,X0,172       
00101010001010101100      #JZ R2,X0,172i     End this loop if finish input & Jump to Location M2
00010110000011001010      #SMR R2,X0,202        Empty R2
10100100100011001010      #LDX X2,202        Load new word index to X2
00000100000011001000      #LDR R0,X0,200        Load character index
00010000000011001001      #AMR R0,X0,201        Add current character location to get the start location of next word
00001000101011001100      #STR R0,X2,204i     Since we have increase the word index,just store next location into word location list
00000111000010101011      #LDR R3,X0,171
00011011000011111111      #AIR R3,255        Set next loop location
00011011000000101111      #AIR R3,47
00001011000010101100      #STR R3,X0,172       
00110100001010101100      #JMP X0,172i        Then keep read next word,jump to LOCAIONT M1
00111000001011000011      #JSR X0,195i        Empty cache LOCATION M2
00000110101011001100      #LDR R2,X2,204i     Load word list begin location to R2 using X2 offset LOCATION M3
00001010000011001001      #STR R2,X0,201        Store the word list begin location into 201
00111000001011000000      #JSR X0,192i        Print the word
00000110000011001010      #LDR R2,X0,202           Load the word index
00011010000000000001      #AIR R2,1             Increase the word index
00001010000011001010      #STR R2,X0,202           Store the new word index
00011110000000001010      #SIR R2,10            Check if finish 10 words
00000111000010101011      #LDR R3,X0,171
00011011000011111111      #AIR R3,255       
00011011000001010111      #AIR R3,87
00001011000010101100      #STR R3,X0,172       
00101010001010101100      #JZ R2,X0,172i      End this loop if finish input & jump to LOCATION M4
00010111000011001010      #SMR R3,X0,202        Empty R3
10100100100011001010      #LDX X2,202        Load new word index to X2
00000111000010101011      #LDR R3,X0,171
00011011000011111111      #AIR R3,255       
00011011000001000100      #AIR R3,68
00001011000010101100      #STR R3,X0,172       
00110100001010101100      #JMP X0,172i        Then keep read next word & jump to LOCATION M3
00111000001011000011      #JSR X0,195i        Empty cache LOCATION M4
00011010000000001001      #AIR R2,9             Set loop number for each big loop
00001010000010110100      #STR R2,X0,180        Store the loop number into 180
00011110000000001000      #SIR R2,8             Set the index X3 as 1
00001010000010110101      #STR R2,X0,181      
10100100110010110101      #LDX X3,181
00011110000000000001      #SIR R2,1             Empty the R2
00000110000010110101      #LDR R2,X0,181        Load the word index LOCATION M5
00010110000010110100      #SMR R2,X0,180        Check if finish current loop words
00000111000010101011      #LDR R3,X0,171
00011011000011111111      #AIR R3,255       
00011011000010001000      #AIR R3,136
00001011000010101100      #STR R3,X0,172       
00101010001010101100      #JZ R2,X0,172i      End this loop if finish compare all words and Jump to LOCATION M7
00000110101011001100      #LDR R2,X2,204i     Load word begin location to R2 using X2 offset
00001010000011001001      #STR R2,X0,201        Store the word list begin location into 201
00000110000010110101      #LDR R2,X0,181        Load the word index again
00011010000000000001      #AIR R2,1             Increase the word index
00001010000010110101      #STR R2,X0,181        Store the new word index
00010110000010110101      #SMR R2,X0,181        Empty R2
10100100100010110101      #LDX X2,181        Load new word index to X2
00000110101011001100      #LDR R2,X2,204i     Load next word begin location to R2 using X2 offset
00001010000011001010      #STR R2,X0,202        Store the second word begin location into 202
00111000001011000010      #JSR X0,194i        Compare the two words,bigger one will be in the R0
00010100000011001010      #SMR R0,X0,202        Check if second number is bigger one
00000111000010101011      #LDR R3,X0,171
00011011000011111111      #AIR R3,255       
00011011000010000111      #AIR R3,135
00001011000010101100      #STR R3,X0,172    
00101000001010101100      #JZ R0,X0,172i      If so then go to the LOCATION M6 to end the loop
00010000000011001010      #AMR R0,X0,202        Restore the content of R0
00000110000010110101      #LDR R2,X0,181         Load the word index again
00011110000000000001      #SIR R2,1             Decrease the word index
00001010000010110101      #STR R2,X0,181           Store the new word index
00010110000010110101      #SMR R2,X0,181        Empty R2
10100100100010110101      #LDX X2,181        Load new word index to X2
00000110101011001100      #LDR R2,X2,204i     Load previous word begin location to R2 using X2 offset
00001000101011001100      #STR R0,X2,204i     Swap the two words location in list 
00000111000010110101      #LDR R3,X0,181         Load the word index  
00011011000000000001      #AIR R3,1             Increase the word index
00001011000010110101      #STR R3,X0,181           Store the new word index
00010111000010110101      #SMR R3,X0,181        Empty R3
10100100100010110101      #LDX X2,181        Load new word index to X2   
00001010101011001100      #STR R2,X2,204i    
00000111000010101011      #LDR R3,X0,171
00011011000011111111      #AIR R3,255       
00011011000001011110      #AIR R3,94
00001011000010101100      #STR R3,X0,172    
00101000001010101100      #JZ R0,X0,172i      If finish then go to LOCATION M5
00000110000010110100      #LDR R2,X0,180        LOCATION M7
00011110000000000001      #SIR R2,1             Decrease loop number for each big loop
00000111000010101011      #LDR R3,X0,171
00011011000011111111      #AIR R3,255       
00011011000010011010      #AIR R3,154
00001011000010101100      #STR R3,X0,172    
00101000001010101100      #JZ R0,X0,172i      Exist the big loop and jump to LOCATION M8
00001010000010110100      #STR R2,X0,180        Store the loop number into 180
00010110000010110100      #SMR R2,X0,180        Empty R2
00011010000000000001      #AIR R2,1
00001010000010110101      #STR R2,X0,181      
10100100110010110101      #LDX X3,181
00011110000000000001      #SIR R2,1             Empty the R2
00000111000010101011      #LDR R3,X0,171
00011011000011111111      #AIR R3,255       
00011011000001011110      #AIR R3,94
00001011000010101100      #STR R3,X0,172    
00110100001010101100      #JMP X0,172i        Jump to LOCATION M5
00111000001011000011      #JSR X0,195i        Empty caches
00000110101011001100      #LDR R2,X2,204i     Load word list begin location to R2 using X2 offset LOCATION M9
00001010000011001001      #STR R2,X0,201        Store the word list begin location into 201
00111000001011000000      #JSR X0,192i        Print the words
00000110000011001010      #LDR R2,X0,202           Load the word index
00011010000000000001      #AIR R2,1             Increase the word index
00001010000011001010      #STR R2,X0,202           Store the new word index
00011110000000001010      #SIR R2,10            Check if finish 10 words
00000111000010101011      #LDR R3,X0,171
00011011000011111111      #AIR R3,255       
00011011000010101110      #AIR R3,174
00001011000010101100      #STR R3,X0,172    
00101010001010101100      #JZ R2,X0,172i      End this loop and jump to LOCATION M10
00010110000011001010      #SMR R2,X0,202        Empty R2
10100100100011001010      #LDX X2,202        Load new word index to X2
00000111000010101011      #LDR R3,X0,171
00011011000011111111      #AIR R3,255       
00011011000010011011      #AIR R3,155
00001011000010101100      #STR R3,X0,172    
00110100001010101100      #JMP X0,172i        Then keep read next word and jump to LOCATION M9
00111000001010111111      #JSR X0,191i        Reset index LOCATION M10
00111000001011000011      #JSR X0,195i        Empty caches
00111000001011000100      #JSR X0,196i        Set the new message
00000110000011001011      #LDR R2,X0,203        Load string match message location into R2
00001010000011001001      #STR R2,X0,201         Store the string match message location into 201
00010110000011001011      #SMR R2,X0,203        Empty the R2
00111000001011000000      #JSR X0,192i        Print the string match message
00111000001010111111      #JSR X0,191i        Reset index
00000110101011001101      #LDR R2,X2,205i     Load match string begin location to R2 using X2 offset
00001010000011001001      #STR R2,X0,201        Store the word list begin location into 201
11110100000000000000      #IN R0,0              Read the character from the keyboard in to R0 LOCATION 11
00001000011011001001      #STR R0,X1,201i     Store the character to the current word location
00011100000000001010      #SIR R0,10            Check if it is ‘\n’
00111000001010111110      #JSR X0,190i        Increase the character index
00000111000010101011      #LDR R3,X0,171
00011011000011111111      #AIR R3,255       
00011011000011000110      #AIR R3,198
00001011000010101100      #STR R3,X0,172    
00101000001010101100      #JZ R0,X0,172i      End the function if input ‘\n’ and jump to M12
00000111000010101011      #LDR R3,X0,171
00011011000011111111      #AIR R3,255       
00011011000010111000      #AIR R3,184
00001011000010101100      #STR R3,X0,172
00110100001010101100      #JMP X0,172i        Read next character and jump to M11
00111000001011000011      #JSR X0,195i        Empty caches LOCATION M12
00000110101011001100      #LDR R2,X2,204i     Load word list begin location to R2 using X2 offset LOCATION 13
00001010000011001001      #STR R2,X0,201        Store the word list begin location into 201
00111000001011000101      #JSR X0,197i        Check the word if contains the content
00000111000010101011      #LDR R3,X0,171
00011011000011111111      #AIR R3,255       
00011011000011010010      #AIR R3,210
00001011000010101100      #STR R3,X0,172
00101000001010101100      #JZ R0,X0,172i      If failed then try to go to next word and jump to M14
00000110101011001100      #LDR R2,X2,204i     Load the word again
00001010000011001001      #STR R2,X0,201         
00111000001011000000      #JSR X0,192i        Print this word
00000110000011001010      #LDR R2,X0,202           Load the word index LOCATION M14
00011010000000000001      #AIR R2,1             Increase the word index
00001010000011001010      #STR R2,X0,202           Store the new word index
00011110000000001010      #SIR R2,10            Check if finish 10 words
00000111000010101011      #LDR R3,X0,171
00011011000011111111      #AIR R3,255       
00011011000011100010      #AIR R3,226
00001011000010101100      #STR R3,X0,172
00101010001010101100      #JZ R2,X0,172i      End this loop if finish input and jump to M15
00010111000011001010      #SMR R3,X0,202        Empty R3
10100100100011001010      #LDX X2,202        Load new word index to X2
00000111000010101011      #LDR R3,X0,171
00011011000011111111      #AIR R3,255       
00011011000011000111      #AIR R3,199
00001011000010101100      #STR R3,X0,172
00110100001010101100      #JMP X0,172i        Then keep read next word and jump to M13
11011100000000000000      #EOP                 LOCATION M15
